// Импортируем Router из библиотеки express.
// Router позволяет группировать несколько маршрутов в один модуль, чтобы сделать код более структурированным.
import { Router } from "express";

// Импортируем функции-контроллеры для пользователей из файла "../controllers/usersController".
// Эти функции будут обрабатывать логику каждого маршрута (получение, создание, обновление, удаление пользователей).
import {
  createUser,
  deleteUser,
  getUsers,
  updateUser,
} from "../controllers/usersController";
// Импортируем middleware для валидации пользователя из файла "../middlewares/validationMiddleware".
// Middleware - это функция, которая выполняется до основного обработчика запроса. В данном случае она проверяет корректность данных перед созданием или обновлением пользователя.
import { validateUser } from "../middlewares/validationMiddleware";

// Создаем объект router. Это специальный объект, который позволяет определять маршруты и связать их с соответствующими функциями.
const router = Router();

// Определяем маршрут для метода GET на корневой путь "/".
// Когда клиент отправляет GET-запрос на этот адрес (например, "/users"), срабатывает функция getUsers из контроллера.
// Это может быть запрос на получение списка всех пользователей.
router.get("/", getUsers);

// Определяем маршрут для метода POST на корневой путь "/".
// Когда клиент отправляет POST-запрос, сначала вызывается middleware validateUser для проверки данных, а затем функция createUser, которая создаёт нового пользователя.
router.post("/", validateUser, createUser);

// Определяем маршрут для метода PUT на путь с параметром ":userId".
// ":userId" - это динамический параметр, который будет заменён на фактический ID пользователя.
// Сначала вызывается middleware validateUser, чтобы проверить данные, затем срабатывает updateUser для обновления информации о пользователе с указанным ID.
router.put("/:userId", validateUser, updateUser);

// Определяем маршрут для метода DELETE на путь с параметром ":userId".
// Когда приходит DELETE-запрос на этот путь, вызывается deleteUser, чтобы удалить пользователя с указанным ID.
router.delete("/:userId", deleteUser);

// Экспортируем router, чтобы он мог быть использован в других частях приложения, например, в основном файле сервера (app.js или server.js).
export default router;
